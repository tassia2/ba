# - Try to find PETSc
#
# Requires CMAKE build of PETSC
# Once done this will define
#  PETSC_INCLUDES - The PETSc include directory
#  PETSC_LIBRARIES    - Link these to use PETSc
#
# Setting this changes the behavior of the search
#  PETSC_DIR - directory in which PETSc resides

find_path (PETSC_DIR include/petsc.h ENV PETSC_DIR DOC "PETSc Install Directory. If petsc was installed via apt, try /usr/lib/petsc")

if (EXISTS "${PETSC_DIR}/lib/petsc/conf/petscvariables") # > 3.5
  set (petsc_conf_rules "${PETSC_DIR}/lib/petsc/conf/rules")
  set (petsc_conf_variables "${PETSC_DIR}/lib/petsc/conf/variables")
elseif (PETSC_DIR)
  message (SEND_ERROR "The pair PETSC_DIR=${PETSC_DIR} PETSC_ARCH=${PETSC_ARCH} do not specify a valid PETSc installation")
endif ()

find_program (MAKE_EXECUTABLE NAMES make gmake)

# Put variables into environment since they are needed to get
# configuration (petscvariables) in the PETSc makefile
set (ENV{PETSC_DIR} "${PETSC_DIR}")

# A temporary makefile to probe the PETSc configuration
set (petsc_config_makefile "${PROJECT_BINARY_DIR}/Makefile.petsc")
file (WRITE "${petsc_config_makefile}"
"## This file was autogenerated by FindPETSc.cmake
# PETSC_DIR  = ${PETSC_DIR}
include ${petsc_conf_rules}
include ${petsc_conf_variables}
show :
\t-@echo -n \${\${VARIABLE}}
")

macro (PETSC_GET_VARIABLE name var)
  set (${var} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
  execute_process (COMMAND ${MAKE_EXECUTABLE} --no-print-directory -f ${petsc_config_makefile} show VARIABLE=${name}
    OUTPUT_VARIABLE ${var}
    RESULT_VARIABLE petsc_return)
endmacro (PETSC_GET_VARIABLE)
petsc_get_variable (PETSC_EXTERNAL_LIB_BASIC petsc_libs_external)
# We are done with the temporary Makefile, calling PETSC_GET_VARIABLE after this point is invalid!
file (REMOVE ${petsc_config_makefile})

find_path (PETSC_INCLUDE_DIR petscts.h HINTS "${PETSC_DIR}" PATH_SUFFIXES include NO_DEFAULT_PATH)
mark_as_advanced (PETSC_INCLUDE_DIR)

include(ResolveCompilerPaths)
resolve_libraries (petsc_libraries_external "${petsc_libs_external}")

set (PETSC_LIBRARIES "${PETSC_DIR}/lib/libpetsc.so" ${petsc_libraries_external} CACHE STRING "PETSc libraries" FORCE)
# Note that we have forced values for all these choices.  If you
# change these, you are telling the system to trust you that they
# work.  It is likely that you will end up with a broken build.
mark_as_advanced (PETSC_LIBRARIES)

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(PETSc DEFAULT_MSG PETSC_LIBRARIES PETSC_INCLUDE_DIR)

